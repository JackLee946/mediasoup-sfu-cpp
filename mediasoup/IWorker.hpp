#pragma once
#include <string>
#include <vector>
#include "Router.hpp"
namespace mediasoup
{

struct WorkerSettings {
	/**
     * Logging level for logs generated by the media worker subprocesses (check
	 * the Debugging documentation). Valid values are 'debug', 'warn', 'error' and
	 * 'none'. Default 'error'.
	 */
	std::string logLevel = "error";

	/**
	 * Log tags for debugging. Check the list of available tags in Debugging
	 * documentation.
	 */
	std::vector<std::string> logTags;
 
	/**
	 * Minimun RTC port for ICE, DTLS, RTP, etc. Default 10000.
	 */
	int rtcMinPort = 10000;

	/**
	 * Maximum RTC port for ICE, DTLS, RTP, etc. Default 59999.
	 */
	int rtcMaxPort = 59999;

	/**
	 * Path to the DTLS public certificate file in PEM format. If unset, a
	 * certificate is dynamically created.
	 */
	std::string dtlsCertificateFile;

	/**
	 * Path to the DTLS certificate private key file in PEM format. If unset, a
	 * certificate is dynamically created.
	 */
	std::string dtlsPrivateKeyFile;

	/**
	 * Custom application data.
	 */
	std::vector<std::pair<std::string, int>> appData;

  int producerFd;
  int consumerFd;
  int payloadProducerFd;
  int payloadConsumerFd;
};

struct WorkerUpdateableSettings {
	/**
	 * Logging level for logs generated by the media worker subprocesses (check
	 * the Debugging documentation). Valid values are 'debug', 'warn', 'error' and
	 * 'none'. Default 'error'.
	 */
	std::string logLevel = "error";

	/**
	 * Log tags for debugging. Check the list of available tags in Debugging
	 * documentation.
	 */
	std::string logTags;
};

/**
 * An object with the fields of the uv_rusage_t struct.
 *
 * - http://docs.libuv.org/en/v1.x/misc.html#c.uv_rusage_t
 * - https://linux.die.net/man/2/getrusage
 */
struct WorkerResourceUsage {
	/* eslint-disable camelcase */

	/**
	 * User CPU time used (in ms).
	 */
	int utime = 0;

	/**
	 * System CPU time used (in ms).
	 */
	int stime = 0;

	/**
	 * Maximum resident set size.
	 */
	int maxrss = 0;

	/**
	 * Integral shared memory size.
	 */
	int ixrss = 0;

	/**
	 * Integral unshared data size.
	 */
	int idrss = 0;

	/**
	 * Integral unshared stack size.
	 */
	int isrss = 0;

	/**
	 * Page reclaims (soft page faults).
	 */
	int minflt = 0;

	/**
	 * Page faults (hard page faults).
	 */
	int majflt = 0;

	/**
	 * Swaps.
	 */
	int nswap = 0;

	/**
	 * Block input operations.
	 */
	int inblock = 0;

	/**
	 * Block output operations.
	 */
	int oublock = 0;

	/**
	 * IPC messages sent.
	 */
	int msgsnd = 0;

	/**
	 * IPC messages received.
	 */
	int msgrcv = 0;

	/**
	 * Signals received.
	 */
	int nsignals = 0;

	/**
	 * Voluntary context switches.
	 */
	int nvcsw = 0;

	/**
	 * Involuntary context switches.
	 */
	int nivcsw = 0;

	/* eslint-enable camelcase */
};

class IWorker {
public:
	virtual ~IWorker() {}
	virtual void Write(const uint8_t* data, size_t len) = 0;
  virtual void PayloadWrite(const uint8_t* data, size_t len) = 0;
  virtual void Write(std::string data) = 0;
  virtual void PayloadWrite(std::string data) = 0;
  virtual std::shared_ptr<Router> createRouter(RouterOptions & options) = 0;
	class Observer {
	public:
		virtual void OnSuccess() = 0;
		virtual void OnFailure(std::string error) = 0;
		virtual void OnClose() = 0;
	};
};

}
